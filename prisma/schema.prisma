generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  password     String
  role         UserRole 
  isDeleted    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  captain      Captain?
  admin        Admin? 
  player       Player?
}

model Admin {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  image         String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique @db.ObjectId
  
}

model Captain {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String     @unique
  image        String?
  contactNumber String
  isDeleted    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique @db.ObjectId // Ensure matching native type
  team        Team? 
}

model Player {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String  
  age           Int?
  images         String[]
  battingOrder  Int?          // Optional batting order
  bowlingType   BowlingType?  // Optional bowling type
  auctionStatus PlayerStatus
  transactionNumber String?
  address String?
  playerCost Int?
  contactNumber  String
  isConfirmed   Boolean      @default(false)
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  team          Team?         @relation(fields: [teamId], references: [id]) // Optional relation to Team
  teamId        String?       @db.ObjectId 
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique @db.ObjectId 
}

model Team {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  image         String?
  balance       Float?
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  captainId     String?   @unique @db.ObjectId // Foreign key to Captain (unique)
  captain       Captain?  @relation(fields: [captainId], references: [id]) // Optional relation to Captain
  players       Player[] 
}

enum UserRole {
  SUPERADMIN
  ADMIN
  CAPTAIN
  PLAYER
}

enum BowlingType {
  SPIN
  FAST
  MEDIUM
  NONE
}
enum PlayerStatus {
  AVAILABLE
  SOLD
}